这个项目旨在练习java中的注释
注解功能：
1.说明程序
2.使用注解：@注解名

作用分类：
1.编写文档：通过代码里标识的注解生成文档【生成API文档】
2.代码分析：通过代码里标识的注解对代码进行分析【使用反射】//我们主要是用的
3.编译检查：通过代码里标识的注解让编译器能够实现基本的编译检查【Override】

练习：
写一个文件AnnoDemo1,写完之后 复制到桌面，去掉文件里的包，然后在该文件夹中打开命令行；
执行javadoc AnnoDemo1.java即可抽取文档注解。

一、jdk预定义的一些注解
    * @Override: 检测被该注解标注的方法是否是继承自父类（接口）的
    * @Oeprecated: 该注解标注的内容，标识已过期
    * @SuppressWarnings: 压制警告
二、自定义注解
    *格式
        元注解
        public @interface 注解名称{
            属性1；
            属性2；
            ...
        }
    * 本质：注解的本质就是接口，该接口默认继承Annotation接口
        public interface MyAnno extends java.lang.annotation.Annotation {
        }
    * 属性：接口中的抽象方法
        要求：
            1.属性的返回值类型//注解中的方法一定要有返回值类型 不能是void
                * 基本数据类型
                * String
                * 枚举
                * 注解
                * 以上类型的数组
            2.为什么定义的抽象方法叫属性
                因为注解在使用的时候，是在注解接口里直接给抽象方法名赋值。
                * 如果定义属性时，使用default关键字给属性默认初始化值，使用注解时可以不给该属性赋值。
                * 如果只有一个属性需要赋值，并且属性的名称是value,则value可以直接省略，直接传值即可。
                * 数组赋值时，值使用{}包裹。如果数组中只有一个值，则大括号可以省略。
    * 元注解(只能作用在注解上)：用于描述注解的注解//在jdk已经为我们定义好了，只需要使用即可
        @Target: 描述注解能够作用的位置
            * ElementType(枚举)取值：
                TYPE: 可以作用于类上
                METHION: 可以作用到方法上
                FILED: 可以作用到成员变量上
        @Retention: 描述注解被保留的阶段
            @Retention(RetentionPolicy.RUNTIME)：RetentionPolicy的三个取值表示了java代码经历的三个阶段（source, class, runtime）
            上述被描述的注解runtime会保留到class文件中，并被jvm读取到
        @Documented: 描述注解是否被抽取到api文档中（使用javadoc）
            即被@Documented描述的注解是否被抽取到api中
        @Inherited: 描述注解是否被子类继承
            如果在自定义注解上添加上此注解，那么被自定义注解修饰的类的子类也继承父类中使用的这个自定义注解。


三、在程序中使用（解析）注解：即获取注解中定义的属性值

