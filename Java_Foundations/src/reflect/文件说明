java代码在计算机中经历的阶段：三个阶段
一、Source源代码阶段：此时有.java -- > .class;  编译
二、Class类对象阶段：类加载器将.class文件加载到内存中；在内存中有一个对象 Class对象来描述字节码文件的：
    * 成员变量： 被封装为Filed对象；为Filed[] fileds
    * 构造方法： 被封装为Constructor对象; Constructor[] cons
    * 成员方法： 被封装为Method对象;Method[] methods
三、Runtime运行时阶段：new 对象



reflect：框架设计的灵魂
    * 框架：半成品的的软件
    * reflect：将类的各个组成部分封装为其他对象，这称为反射机制。
        比如将成员变量封装为 Filed对象，将构造方法封装为Constructor对象，将成员方法封装为Method对象。
        * 好处：
            1.可以在程序的运行过程中操纵这些对象。
            2.可以解耦，提高程序的可扩展性。

        * 获取Class对象的方式：
                1. Class.forName("全类名")： 将字节码文件夹加载进内存，返回Class
                    多用于配置文件，将类名定义在配置文件中。读取文件，加载类。
                2.类名.class: 通过类名的属性class获取
                    多用于参数传递
                3.对象.getClass():在Object类中定义的
                    多用于对象的获取字节码的方式
                结论：同一个字节码文件（*.class）在一次运行过程中，只会被加载一次，不论哪一种方式获取的class对象都是同一个。

        * Class对象功能：
            * 获取功能
            1. 获取成员变量们
                * Filed[] getFileds()
                * Filed getFiled(String name)

                * Filed[] getDeclaredFileds()
                * Filed get DeclaredFiled(String name)

            2. 获取构造方法们：
                * Constructor<?>[] getConstructors()
                * Constructor<T> getConstructor(类<?>...parameterTypes)

                * Constructor<T> getDeclaredConstruct(类<?>...parameterTypes)
                * Constructor<T>[] getDeclaredConstructors()
            3. 获取成员方法们：
                * Method[] getMethods()
                * Method getMethod(String name, 类<?>...parameterTypes)

                * Method[] getDeclaredMethods()
                * Method getDeclaredMethod(String name, 类<?>...parameterTypes)
            4.获取类名//这里是指全类名
                * String getName()

                * Filed: 成员变量
                    * 操作：
                        1.设置值
                            * void set(Object obj, Object value)
                        2. 获取值
                            * get(Object obj)
                        3. 忽略访问权限的修饰符的安全检查（即带Declared的方法可以获取到所有属性，
                            但是在获取后，在对他们操作时需要用到暴力反射）
                            * .setAccessible(true);
                * Constructor: 创建对象，该对象也有setAccessible()暴力反射方法
                    * 创建对象：
                        * T newInstance(Object... initargs)
                        * 如果使用无参构造方法创建对象， 操作可以简化：Class对象的newInstance方法
                * Method: 方法对象，该对象也有setAccessible()暴力反射方法
                    * 执行方法：//1.传递真实的对象，2.传递方法的实际列表
                        * Object invoke(Object obj, Object... args)
                    * 获取方法的名称：
                        * getName()

        * 案例：
            * 需求： 写一个框架"框架"，不能改变该类的任何前提下，可以帮我们创建任意类的对象，并且执行其中任意的方法。
                * 实现需要的技术：
                    1. 配置文件
                    2.反射
                * 步骤：
                    1.将需要创建的对象的全类名和需要执行的方法定义在配置文件中
                        //配置文件使用方法：java.util包中有一个Properties类,用来创建对象，然后用其对象的load()方法即可获取配置文件数据。
                    2.在程序中加载读取配置文件
                    3.使用反射技术来加载类文件进内存
                    4.创建对象
                    5.执行方法





